# get_job_note
for c++
#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct binaryTreeNode
{
	int val;
	binaryTreeNode* leftTree;
	binaryTreeNode* rightTree;
	binaryTreeNode(int x):val(x),leftTree(NULL),rightTree(NULL){}
};
class Solution
{
public:
	struct binaryTreeNode * reconstructBinaryTree(vector<int>pre, vector<int>in)
	{
	int len = in.size();
	if (len == 0) return NULL; 
	vector<int> left_pre,left_in, right_pre, right_in;

	binaryTreeNode* head = new binaryTreeNode(pre[0]);
	int gin=0;
	for (int i = 0; i < len;i++)
	{
		if (in[i] == pre[0])
		{
			gin = i; break;
	    }
	}
	for (int i = 0; i <gin; i++)
	{
		int j = i +1;
		left_pre.push_back(pre[j]);
		left_in.push_back(in[i]);
	}
	for (int i = gin + 1; i < len; i++)
	{
		right_pre.push_back(pre[i]);
		right_in.push_back(in[i]);
	}
	head->leftTree = reconstructBinaryTree(left_pre, left_in);
	head->rightTree = reconstructBinaryTree(right_pre, right_in);
	return head;

	};
};

void printBinaryTree(binaryTreeNode* head)
{
	//从上层打印
	if (head == NULL) cout << "Invalid Input" << endl;
	queue<binaryTreeNode*> que;
	que.push(head);
	while (!que.empty())
	{
		binaryTreeNode* pNode = que.front();
		que.pop();
		cout << pNode->val << ' ';
		if (pNode->leftTree != NULL)
		{
			que.push(pNode->leftTree);
		}
		if (pNode->rightTree != NULL)
		{
			que.push(pNode->rightTree);
		}
	}
};

int main()
{
	int a[8] = { 1,2,4,7,3,5,6,8 };
	int b[8] = { 4,7,2,1,5,3,8,6 };
	vector<int> pre(a, a + 8);
	vector<int> in(b, b + 8);
	Solution sol;
	binaryTreeNode* head = sol.reconstructBinaryTree(pre, in);
	printBinaryTree(head);
};
